buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sourceforge.fmpp:fmpp:0.9.13'
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'io.freefair.javadoc-links' version '4.1.6' apply false
}

defaultTasks 'clean', 'build'

def projGroup = 'org.unix4j'
def projVersion = file('version.txt').text.trim()

ext {
    //gradle clean build publish -PossrhUsername=mterzer -PossrhPassword=xxx

    isReleaseVersion = !projVersion.endsWith('-SNAPSHOT')
    releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

    println name + " version=" + projVersion + " release=" + isReleaseVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'unix4j'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Efficient, zero garbage framework to implement event sourcing applications'
    url = 'https://github.com/tools4j/unix4j'

    scm {
        connection = 'scm:git:https://github.com/tools4j/unix4j.git'
        developerConnection = 'scm:git:https://github.com/tools4j/unix4j.git'
        url = 'https://github.com/tools4j/unix4j.git'
    }

    licenses {
        license {
            name = 'The MIT License (MIT)'
            url = 'https://opensource.org/licenses/MIT'
        }
    }

    developers {
        developer {
            id = 'terzerm'
            name = 'Marco Terzer'
            email = 'terzerm@gmail.com'
            url = 'https://github.com/terzerm'
        }
        developer {
            id = 'bjwarner'
            name = 'Ben Warner'
            email = 'bjwarner@gmail.com'
            url = 'https://github.com/benjwarner'
        }
    }
}

jar.enabled = false

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'io.freefair.javadoc-links'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java-library'
    //apply plugin: 'license'
    apply plugin: 'io.freefair.javadoc-links'

    compileJava   {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    dependencies {
        testImplementation "junit:junit:4.13.2"
        testImplementation "org.slf4j:slf4j-api:1.7.30"
        testImplementation "org.slf4j:slf4j-log4j12:1.7.30"
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
    }

    group = projGroup
    version = projVersion

    tasks.withType(Sign) {
        onlyIf {
            isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)
        }
    }

    tasks.withType(Jar) {
        enabled = true
        includeEmptyDirs = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    tasks.withType(Test) {
        useJUnitPlatform {
            includeEngines 'junit-vintage'
        }

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
        reports.html.enabled = false // Disable individual test reports
    }

    javadoc {
        title = '<h1>Unix4j</h1>'
        options.bottom = '<i>Copyright &#169; 2020 tools4j.org (Marco Terzer, Ben Warner). All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.addBooleanOption 'html5', false
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier.set "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }
}

project(':unix4j-base') {
    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            unix4jbase(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.unix4jbase
    }
}

project(':unix4j-command') {
    sourceSets {
        main {
            java {
                srcDir "$buildDir/generated-sources/main/java"
            }
        }
    }

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath 'net.sourceforge.fmpp:fmpp:0.9.13'
        }
    }

    configurations {
        pmd
        pmdProject
    }

    dependencies {
        api project(':unix4j-base')
        api project(':unix4j-tools')
        pmd 'net.sourceforge.fmpp:fmpp:0.9.13'
        implementation 'org.freemarker:freemarker:2.3.31'
        implementation 'org.beanshell:bsh:2.0b5'
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    task generateFmppSources(dependsOn: ":unix4j-tools:compileJava") {
        mustRunAfter init
        doLast {
            println "Generating sources...."
            ant.taskdef(name: 'fmpp', classname:'fmpp.tools.AntTask', classpath: buildscript.configurations.classpath.asPath + ";" + project(':unix4j-tools').sourceSets.main.output.classesDirs.asPath)
            ant.fmpp(
                    configuration: "src/main/resources/codegen/config.fmpp",
                    sourceRoot: "src/main/resources/codegen/templates",
                    outputRoot: "$buildDir/generated-sources/main/java"
            )
            println "Generating sources complete."
        }
    }
    compileJava.dependsOn generateFmppSources

    publishing {
        publications {
            unix4jcommand(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.unix4jcommand
    }
}

project(':unix4j-perf') {
    dependencies {
        api project(':unix4j-command')
        implementation 'org.freemarker:freemarker:2.3.31'
        implementation 'org.beanshell:bsh:2.0b5'
    }
}

project(':unix4j-tools') {
    dependencies {
        //api project(':elara-core')
        implementation 'org.freemarker:freemarker:2.3.31'
        implementation 'org.beanshell:bsh:2.0b5'
        compile 'net.sourceforge.fmpp:fmpp:0.9.16'
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            unix4jTools(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.unix4jTools
    }
}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.addStringOption 'Xdoclint:none', '-quiet'

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

task jarAggregatedJavadocs(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    archiveVersion.set(projVersion)
    from javadoc.destinationDir
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all sub-projects
    reportOn subprojects*.test
}

task copyCrashLogs(type: Copy) {
    from '.'
    include '**/hs_err*.log'
    into 'build/crash_logs'
    includeEmptyDirs = false
}

wrapper {
    gradleVersion = '6.1.1'
    distributionType = 'ALL'
}
